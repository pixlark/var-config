
==================== FINAL INTERFACE ====================
2019-03-10 19:25:22.688748841 UTC

interface main:Main 8064
  interface hash: ae7cd84b0ebb7d8072f057b15dc131f7
  ABI hash: 20f8cc36589a104f7f294847c9d8a32a
  export-list hash: 070b86979c7ba5d25dd7aea391d4379d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ac740a13af3c563505561b8bdb6c8847
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.&?
  Main.isalpha
  Main.isdigit
  Main.isspace
  Main.lexString
  Main.main
  Main.readInt
  Main.readWord
  Main.|?
  Main.Token{Main.EOF Main.IntLiteral Main.Word}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.IO dd4f3cfe73b94b7cae46a4ca98a3f09f
import  -/  base-4.12.0.0:Text.Read 87f80fc2538a174aea915dd98f74fc0a
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
f716c05b4b8a226597b5ebc32e3a09da
  $fShowToken :: GHC.Show.Show Main.Token
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Token
                  Main.$fShowToken_$cshowsPrec
                  Main.$fShowToken_$cshow
                  Main.$fShowToken_$cshowList -}
f716c05b4b8a226597b5ebc32e3a09da
  $fShowToken1 :: Main.Token -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowToken_$cshowsPrec Main.$fShowToken2) -}
a6d121298c5bb4c45150fedcc1e45ea1
  $fShowToken2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
344f90a2d375adebd1ccfdd8216b3e4e
  $fShowToken3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IntLiteral "#) -}
f76cce77850318ca1573553996bcd7a4
  $fShowToken4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Word "#) -}
36e71aaf542662e5ba626e98b7c6b543
  $fShowToken5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowToken6) -}
67991e943f6243ae868f1fdee6529440
  $fShowToken6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EOF"#) -}
49ac44a314e1c70ca7da585be6ffe3fe
  $fShowToken7 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f716c05b4b8a226597b5ebc32e3a09da
  $fShowToken_$cshow :: Main.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Main.Token) ->
                 case x of wild {
                   Main.EOF -> Main.$fShowToken5
                   Main.Word b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowToken4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Main.$fShowToken7))
                   Main.IntLiteral b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowToken3
                        (case b1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                11#
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) -}
f716c05b4b8a226597b5ebc32e3a09da
  $fShowToken_$cshowList :: [Main.Token] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Token]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Token Main.$fShowToken1 ls s) -}
f716c05b4b8a226597b5ebc32e3a09da
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> Main.Token -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.Token)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.EOF -> GHC.Base.++ @ GHC.Types.Char Main.$fShowToken5 eta
                   Main.Word b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Main.$fShowToken4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Main.$fShowToken4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            eta))))) } }
                   Main.IntLiteral b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Main.$fShowToken3
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 eta of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Main.$fShowToken3
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } } }) -}
439da35047da729552386f996f719c74
  $tc'EOF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9401036608376641400##
                   12384535993355594990##
                   Main.$trModule
                   Main.$tc'EOF2
                   0#
                   Main.$tc'EOF1) -}
b8caea2c0e03aeef71e2fa5fb9c7f75c
  $tc'EOF1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f2b11ebcb37cc04a3ed8f12b5f5a35f6
  $tc'EOF2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'EOF3) -}
ff8a66e9258e163f68f68ab4e7681992
  $tc'EOF3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EOF"#) -}
2dd541abd35ea0fa3eed56765bde3e2b
  $tc'IntLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10832045047931092994##
                   13776769253984505122##
                   Main.$trModule
                   Main.$tc'IntLiteral2
                   0#
                   Main.$tc'IntLiteral1) -}
203521fa1fcfcca4f648281da165f2b7
  $tc'IntLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6c8d8eb85a9d323555dd8e00033839f2
  $tc'IntLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'IntLiteral3) -}
cbe356da20e48ff01fa717a1d625c4e7
  $tc'IntLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntLiteral"#) -}
65d22c9fb466526b1aed3c437d7367aa
  $tc'Word :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5326415276773603118##
                   5431315266775659119##
                   Main.$trModule
                   Main.$tc'Word2
                   0#
                   Main.$tc'Word1) -}
986a06699a16a8d86cf935f1835c7c69
  $tc'Word1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84dab687e1e56da166ce8e422c14e4f5
  $tc'Word2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Word3) -}
85804fdfd632da0dc81d0266fac9d6af
  $tc'Word3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Word"#) -}
1127f15315457b11033369132cb71f1c
  $tcToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7314202970098702604##
                   11629948393857996392##
                   Main.$trModule
                   Main.$tcToken1
                   0#
                   GHC.Types.krep$*) -}
5acee7bf937b31466433eef5b402923b
  $tcToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcToken2) -}
8eccb0b68c7db6455343c3b5bb52d925
  $tcToken2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Token"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f4b00466727754ff1eaf02556be006a7
  $wisalpha :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 case GHC.Prim.>=# (GHC.Prim.ord# ww) 97# of lwild {
                   DEFAULT
                   -> case GHC.Prim.>=# (GHC.Prim.ord# ww) 65# of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# (GHC.Prim.ord# ww) 90#) }
                   1#
                   -> case GHC.Prim.<=# (GHC.Prim.ord# ww) 122# of lwild1 {
                        DEFAULT
                        -> case GHC.Prim.>=# (GHC.Prim.ord# ww) 65# of lwild2 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# (GHC.Prim.ord# ww) 90#) }
                        1# -> GHC.Types.True } }) -}
e1bf38b9fa1c8b45426ab354ffb722b0
  $wlvl :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case GHC.Prim.>=# (GHC.Prim.ord# ww) 48# of lwild {
                       DEFAULT
                       -> case ww of wild {
                            DEFAULT -> GHC.Types.False '_'# -> GHC.Types.True }
                       1#
                       -> case GHC.Prim.<=# (GHC.Prim.ord# ww) 57# of lwild1 {
                            DEFAULT
                            -> case ww of wild {
                                 DEFAULT -> GHC.Types.False '_'# -> GHC.Types.True }
                            1# -> GHC.Types.True } }
                 } in
                 case GHC.Prim.>=# (GHC.Prim.ord# ww) 97# of lwild {
                   DEFAULT
                   -> case GHC.Prim.>=# (GHC.Prim.ord# ww) 65# of lwild1 {
                        DEFAULT -> $j
                        1#
                        -> case GHC.Prim.<=# (GHC.Prim.ord# ww) 90# of lwild2 {
                             DEFAULT -> $j 1# -> GHC.Types.True } }
                   1#
                   -> case GHC.Prim.<=# (GHC.Prim.ord# ww) 122# of lwild1 {
                        DEFAULT
                        -> case GHC.Prim.>=# (GHC.Prim.ord# ww) 65# of lwild2 {
                             DEFAULT -> $j
                             1#
                             -> case GHC.Prim.<=# (GHC.Prim.ord# ww) 90# of lwild3 {
                                  DEFAULT -> $j 1# -> GHC.Types.True } }
                        1# -> GHC.Types.True } }) -}
8afa4d189620166e8d91ebbb1238a40e
  $wreadInt :: GHC.Base.String -> (# Main.Token, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   ds :: ([GHC.Types.Char], [GHC.Types.Char])
                   = case GHC.List.$wspan
                            @ GHC.Types.Char
                            Main.isdigit
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# Main.IntLiteral
                      (case Text.Read.readEither8
                              @ GHC.Types.Int
                              (Text.ParserCombinators.ReadP.run
                                 @ GHC.Types.Int
                                 Main.readInt3
                                 (case ds of wild { (,) p r -> p })) of wild {
                         [] -> Main.readInt2
                         : x ds1
                         -> case ds1 of wild1 { [] -> x : ipv ipv1 -> Main.readInt1 } }),
                    case ds of wild { (,) p r -> r } #)) -}
a3f428c7a3a2254f46d803affbc26335
  $wshowl :: [Main.Token] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
d3dae90d2f1acbf9699a04b9c300bed4
  (&?) ::
    (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (f :: a -> GHC.Types.Bool)
                   (g :: a -> GHC.Types.Bool)
                   (x :: a) ->
                 case f x of wild {
                   GHC.Types.False -> GHC.Types.False GHC.Types.True -> g x }) -}
f716c05b4b8a226597b5ebc32e3a09da
  data Token = EOF | Word GHC.Base.String | IntLiteral GHC.Types.Int
3f05b61460a0e07300d7b69b18e06a3d
  isalpha :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Main.$wisalpha ww1 }) -}
17a8ce2f213f8fb791188505104640a2
  isdigit :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 case c of wild { GHC.Types.C# c# ->
                 case GHC.Prim.>=# (GHC.Prim.ord# c#) 48# of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# (GHC.Prim.ord# c#) 57#) } }) -}
3257f2d6d5bc1c4e177da3b1b273d45f
  isspace :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Main.isspace1) -}
666bcb9911a80e2a1657a1ac9878e739
  isspace1 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.isspace8
                   Main.isspace2) -}
04e19eb80d9d89f2e95be2d400760d4e
  isspace2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.isspace7
                   Main.isspace3) -}
648bc682e087b874b784fd4d83f9d343
  isspace3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.isspace6
                   Main.isspace4) -}
e7964faf2f7981e4bba44d8c0f98a5eb
  isspace4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.isspace5
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8e16c20ced91910dd42d5ac037200233
  isspace5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\r'#) -}
fa187263c53816ce3f875aef0b49b0f6
  isspace6 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
af5f2773d2cbaf4972c7feddcdb57659
  isspace7 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\t'#) -}
6a888e1322db90a9e3c643087345f99c
  isspace8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
01c53fe45aa82f49e2df0ef897e74fc1
  lexString :: GHC.Base.String -> [Main.Token]
  {- Arity: 1, Strictness: <S,1*U> -}
85eefae4587d126c1dc07c9fc5060985
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
60e92ade99b2d80f71cac898e29a914b
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hGetContents1
                        GHC.IO.Handle.FD.stdin
                        s of ds1 { (#,#) ipv ipv1 ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    (GHC.Types.:
                       @ GHC.Types.Char
                       Main.isspace6
                       (case Main.lexString ipv1 of wild {
                          []
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.CString.unpackAppendCString#
                                  GHC.Show.showList__4
                                  (GHC.Types.[] @ GHC.Types.Char))
                               Main.main2
                          : x xs
                          -> GHC.Base.++_$s++
                               @ GHC.Types.Char
                               Main.main2
                               GHC.Show.showList__3
                               (case x of wild1 {
                                  Main.EOF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       Main.$fShowToken5
                                       (case Main.$wshowl xs of ww { (#,#) ww1 ww2 ->
                                        GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                                  Main.Word b1
                                  -> GHC.CString.unpackAppendCString#
                                       Main.$fShowToken4
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (GHC.Show.showLitString
                                             b1
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)3
                                                (Main.main_showl xs))))
                                  Main.IntLiteral b1
                                  -> GHC.CString.unpackAppendCString#
                                       Main.$fShowToken3
                                       (case b1 of ww2 { GHC.Types.I# ww3 ->
                                        case GHC.Show.$wshowSignedInt
                                               11#
                                               ww3
                                               (Main.main_showl xs) of ww4 { (#,#) ww5 ww6 ->
                                        GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }) }))
                    GHC.Types.False)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv }) -}
104d939ce3d1b327ff466a0d4ba15195
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
41a2db0968cd437d650cb21089e083d0
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \\n"#) -}
71148290344ca99c15021663fd5b3d3e
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
0c5c15f126fba65635c5cf1cf3986f7f
  main_showl :: [Main.Token] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Main.Token]) ->
                 case Main.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
e64d394310d4cefb7930a3297503d322
  readInt :: GHC.Base.String -> (Main.Token, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wreadInt w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
0de0b69d0e7379434b6c49a8158b7b20
  readInt1 :: GHC.Types.Int
  {- Strictness: x -}
25d7bf055f00928ae8aeb7437a23eeaa
  readInt2 :: GHC.Types.Int
  {- Strictness: x -}
b4157d2e3cb8c1088c7081ee3ffb6a22
  readInt3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
1560bc7ca37c40a6fda746e585f30cba
  readWord :: GHC.Base.String -> (Main.Token, GHC.Base.String)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case w of wild {
                   [] -> Main.readWord2
                   : c tl
                   -> let {
                        ds :: ([GHC.Types.Char], [GHC.Types.Char])
                        = case GHC.List.$wspan
                                 @ GHC.Types.Char
                                 Main.readWord1
                                 tl of ww { (#,#) ww1 ww2 ->
                          (ww1, ww2) }
                      } in
                      (Main.Word
                         (GHC.Types.:
                            @ GHC.Types.Char
                            c
                            (case ds of wild1 { (,) p r -> p })),
                       case ds of wild1 { (,) p r -> r }) }) -}
2b6b0a5e8276d85e2b31fc541fdc031d
  readWord1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Main.$wlvl ww1 }) -}
6c5086c8e939932a8ba42385e1133507
  readWord2 :: (Main.Token, GHC.Base.String)
  {- Strictness: x -}
817c376a4b9293b17716cf847cae67eb
  (|?) ::
    (a -> GHC.Types.Bool)
    -> (a -> GHC.Types.Bool) -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (f :: a -> GHC.Types.Bool)
                   (g :: a -> GHC.Types.Bool)
                   (x :: a) ->
                 case f x of wild {
                   GHC.Types.False -> g x GHC.Types.True -> GHC.Types.True }) -}
instance [safe] GHC.Show.Show [Main.Token] = Main.$fShowToken
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

